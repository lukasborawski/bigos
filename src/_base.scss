@import "variables";
@import "mixins";

// --------------------
// VISUALS
// --------------------

* {
  @include element-matched;
  outline: none 0 !important;
}
a {
  color: $link-base-color;
  word-wrap: normal;
  @if $link-decoration == true {
    text-decoration: $link-decoration-type;
  }
  @else {
    text-decoration: none;
  }
  &:hover {
    @if $link-hover-type == "color" {
      color: $link-hover-color;
      text-decoration: none;
    }
    @else {
      text-decoration: $link-hover-type;
      * {
        color: inherit;
      }
    }
  }
  &.active,
  &:active,
  &:focus,
  &:visited {
    @if $link-decoration {
      text-decoration: $link-decoration-type;
    } @else {
      text-decoration: none
    }
    color: $link-visited-color;
  }
}
@include class-model(link) {
  display: block;
  cursor: pointer;
  color: $link-base-color;
  text-decoration: $link-class-type;
  // types
  @include class-modifier(inline) {
    width: auto;
    display: inline-block;
  }
  @include class-modifier(naked) {
    text-decoration: none;
    @if $link-class-naked-hover-type == underline {
      &:hover {
        text-decoration: $link-class-naked-hover-type;
      }
    } @else {
      &:hover {
        color: $link-class-naked-hover-color;
        text-decoration: none;
      }
    }
  }
  &:hover {
    text-decoration: $link-class-hover-type;
  }
}
@mixin cursor-inherit($value) {
   @include class-option(inherit) {
    * {
      cursor: $value;
    }
  }
}
@include class-model(cursor) {
  * {
    cursor: auto;
  }
  // type
  @include class-modifier(pointer) {
    cursor: pointer;
    @include cursor-inherit(pointer);
  }
  @include class-modifier(default) {
    cursor: default;
    @include cursor-inherit(default);
  }
  @include class-modifier(auto) {
    cursor: auto;
    @include cursor-inherit(auto);
  }
}
// Backgrounds
@include class-model(background) {
  // color
  @include class-modifier(color) {
    $n: length($background-color-name);
    @for $i from 1 through $n {
      @include class-option(nth($background-color-name, $i)) {
        background-color: #{nth($background-color-code, $i)};
      }
    }
  }
}
// Borders
@include class-model(border) {
  // types
  @each $border-type in $border-types {
     @include class-option($border-type) {
      border-#{$border-type}: $border-default $border-default-color;
    }
  }
  @include class-option(full) {
    border: $border-default $border-default-color;
  }
  // colors
  @include class-modifier(color) {
    $n: length($border-color-name);
    @for $i from 1 through $n {
      @include class-option(nth($border-color-name, $i)) {
        border-color: #{nth($border-color-code, $i)};
      }
    }
  }
  // others
  @include class-modifier(bold) {
    border-width: $border-bold-size;
  }
  @include class-modifier(none) {
    border: none !important;
  }
  @include class-modifier(radius) {
    @include class-option(circle) {
      @include border-radius(50%);
    }
    @include class-option(small) {
      @include border-radius($border-radius-small);
    }
    @include class-option(medium) {
      @include border-radius($border-radius-medium);
    }
    @include class-option(big) {
      @include border-radius($border-radius-big);
    }
  }
}
// Shifts
@include class-model(shift) {
  @include shift_types(normal horizontal vertical, $shift-iteration, margin, margin);
  @include shift_types(normal horizontal vertical, $shift-iteration, padding, padding);
  @include shift_types(top bottom left right, $shift-iteration, margin, margin);
  @include shift_types(top bottom left right, $shift-iteration, padding, padding);
}

// --------------------
// FONTS / TEXTS
// --------------------

strong {
  @if $font-custom == true {
    @if $font-custom-master == true {
      @if $font-base-bold {
        font-family: $font-base-bold;
      }
      @else {
        font-weight: bold;
      }
      font-weight: normal;
    }
    @else {
      font-family: $font-base-simple;
      font-weight: bold;
    }
  }
  @else {
    font-family: $font-base-simple;
    font-weight: bold;
  }
}
@include class-model(text) {
  @include class-modifier(color) {
    $n-colors: length($font-colors-name);
    @for $i from 1 through $n-colors {
      @include class-option(nth($font-colors-name, $i)) {
        color: #{nth($font-colors-code, $i)};
      }
    }
  }
  @include class-modifier(size) {
    $n-sizes: length($font-sizes-name);
    @for $i from 1 through $n-sizes {
      @include class-option(nth($font-sizes-name, $i)) {
        @include font-size(nth($font-sizes-number, $i));
      }
    }
  }
  @include class-modifier(align) {
     @include class-option(right) {
      text-align: right;
    }
    @include class-option(left) {
      text-align: left;
    }
    @include class-option(center) {
      text-align: center;
    }
  }
  @include class-modifier(uppercase) {
    text-transform: uppercase;
  }
  @include class-modifier(capitalize) {
    text-transform: capitalize;
  }
}
@if $font-custom == true {
   @if $font-base-thin and not $font-base-thin == false{
    @include font-face($font-base-thin);
  }
  @if $font-base-regular and not $font-base-regular == false {
    @include font-face($font-base-regular);
  }
  @if $font-base-light and not $font-base-light == false {
    @include font-face($font-base-light);
  }
  @if $font-base-medium and not $font-base-medium == false {
    @include font-face($font-base-medium);
  }
  @if $font-base-bold and not $font-base-bold == false {
    @include font-face($font-base-bold);
  }
  @if $font-base-semibold and not $font-base-semibold == false {
    @include font-face($font-base-semibold);
  }
  @if $headings-bold and $font-base-bold {
    h1,
    h2,
    h3 {
      font-family: $font-base-bold;
    }
    h4,
    h5,
    h6 {
      font-family: $font-base-regular;
    }
  }
  @else {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: normal;
    }
  }
  @if $font-base-regular-it {
    em {
      font-family: $font-base-regular-it;
    }
  }
}
@if $font-secondary == true {
  @if $font-secondary-regular and not $font-secondary-regular == false{
    @include font-face($font-secondary-regular);
  }
  @if $font-secondary-bold and not $font-secondary-bold == false {
    @include font-face($font-secondary-bold);
  }
  @if $font-secondary-semibold and not $font-secondary-semibold == false {
    @include font-face($font-secondary-semibold);
  }
}
@if $font-icons == true {
  @include font-face($font-icons-name);
}
// Headings size factor
$prefix: text;
@for $i from 1 through $headings-count {
  .h#{$i},
  h#{$i} {
    // $headings-size-factor defined in _variables
    @include font-size($headings-size - ($i * $headings-size-factor));
    @include line-height($headings-lineheight-size - ($i * $headings-lineheight-factor));
  }
}
// Custom font class definition
@if $font-custom == true {
  .cf {
    font-family: $font-base-regular;
  }
  .cfb,
  .cfs {
    font-weight: 600;
    font-family: $font-base-bold;
  }
  .cfl {
    font-weight: 400;
    font-family: $font-base-light;
  }
  .csf {
    font-family: $font-secondary-regular;
  }
  .csfb {
    font-family: $font-secondary-bold;
  }
  .csfl {
    font-family: $font-secondary-light;
  }
}

// --------------------
// BOXES / BLOCKS
// --------------------

@include class-model(box) {
  // Box with default setup
  @include class-modifier(full) {
    @include class-option(width) {
      width: $width-100;
      @include class-option(ofscreen) {
        width: 100vw;
      };
    }
    @include class-option(height) {
      height: $height-100;
      @include class-option(flexible) {
        height: auto;
      }
      @include class-option(ofscreen) {
        height: 100vh;
      };
    }
  }
  @include class-modifier(relative) {
    position: relative;
  }
  // Box with grid system
  @include class-modifier(grid) {
    height: auto;
    position: relative;
    @include font-size(0);
    > * {
      vertical-align: top;
    }
    @include class-model(column, false) {
      @include class-modifier(full) {
        @include class-option(width) {
          width: $width-100;
        }
        @include class-option(height) {
          height: $height-100;
        }
      }
      position: relative;
      display: inline-block;
      @include font-size($font-base-size);
      // $grid-count defined in _variables
      @for $i from 1 through $grid-count {
        @include class-modifier(width_#{$i}) {
          width: 100% / $grid-count * $i;
        }
      }
      @for $i from 1 through $grid-count {
        @include class-modifier(offset_#{$i}) {
          width: 100% / $grid-count * $i;
        }
      }
    }
  }
  // Box with horizontal align elements
  @include class-modifier(vertical_align) {
    @include class-option(transform) {
      > * {
        @include element-vertical-align;
      }
    }
    @include class-option(top) {
      > * {
        vertical-align: top;
      }
    }
    @include class-option(middle) {
      > * {
        vertical-align: middle;
      }
    }
    @include class-option(bottom) {
      > * {
        vertical-align: bottom;
      }
    }
    @include class-option(baseline) {
      > * {
        vertical-align: baseline;
      }
    }
    // internet explorer behavior
    .ie-8 &,
    .ie-9 & {
      display: table;
      > * {
        vertical-align: middle;
        display: table-cell;
      }
    }
  }
  // Box with inline elements
  @include class-modifier(inline) {
    display: inline-block;
    .element-inline {
      @include font-size($font-base-size);
      display: inline-block;
    }
    @include class-option(all) {
      > * {
        display: inline-block;
      }
    }
  }
  // Box with images
  @include class-modifier(image) {
    position: relative;
    height: auto;
    %image-extended {
      width: $width-100;
      height: auto;
      position: relative;
      display: inline-block;
      @include class-modifier(full) {
        @include class-option(height) {
          height: $height-100;
        }
      }
    }
    @include class-model(element-image) {
      @extend %image-extended;
      // special declaration for a wrapp
      @include class-option(inherit) {
        img {
          @extend %image-extended;
        }
      }
    }
  }
  // Box with floated elements
  @include class-modifier(float) {
    overflow: hidden;
    width: $width-100;
    @include class-option(left) {
      float: left;
    }
    @include class-option(right) {
      float: right;
    }
  }
  // Box with flex layout
  @include class-modifier(flex) {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    // settings
    flex-wrap: wrap;
    @include class-option(nowrap) {
      flex-wrap: nowrap;
    };
    // content
    @include class-modifier(content) {
      // items align
      @include class-option(items) {
        $n-items-alignments: length($flex-box-items-alignments-name);
        @for $i from 1 through $n-items-alignments {
          @include class-option(nth($flex-box-items-alignments-name, $i)) {
            align-items: nth($flex-box-items-alignments-value, $i)
          }
        }
      };
      // content direction
      @include class-option(direction) {
        @include class-option(row) {
          flex-direction: row;
        }
        @include class-option(rowreverse) {
          flex-direction: row-reverse;
        }
        @include class-option(col) {
          flex-direction: column;
        }
        @include class-option(colreverse) {
          flex-direction: column-reverse;
        }
      }
      // content alignmen
      @include class-option(align) {
        $n-content-alignments: length($flex-box-content-alignments-name);
        @for $i from 1 through $n-content-alignments {
          @include class-option(nth($flex-box-content-alignments-name, $i)) {
            align-content: nth($flex-box-content-alignments-value, $i)
          }
        }
      };
      // content justify
      @include class-option(justify) {
        $n-content-alignments: length($flex-box-content-alignments-name);
        @for $i from 1 through $n-content-alignments {
          @include class-option(nth($flex-box-content-alignments-name, $i)) {
            justify-content: nth($flex-box-content-alignments-value, $i)
          }
        }
      };
    };
    @include class-modifier(item) {
      // item width
      @for $i from 1 through $flex-box-items-sequence-count {
        @include class-modifier("width_#{$i}") {
          flex-basis: 100% / $flex-box-items-sequence-count * $i;
        }
      }
      // item shrink
      @for $i from 1 through $flex-box-items-shrink-count {
        @include class-modifier("shrink_#{$i}") {
          flex-shrink: $i;
        }
      }
      // item grow
      @for $i from 1 through $flex-box-items-grow-count {
        @include class-modifier("grow_#{$i}") {
          flex-grow: $i;
        }
      }
      // item alignment
      $n-items-alignments: length($flex-box-items-alignments-name);
      @for $i from 1 through $n-items-alignments {
        @include class-option(nth($flex-box-items-alignments-name, $i)) {
          align-self: nth($flex-box-items-alignments-value, $i)
        }
      }
    }
    // flex flow shorthand
    @include class-modifier(flow) {
      @include class-option(rowwrap) {
        flex-flow: row wrap;
      }
    }
    // column case mode
    @include class-model(column) {
      height: auto;
    }
  }
}
@include class-model(el-fit) {
  display: inline-block;
}
@include class-model(_mobile) {
  display: none;
}

// --------------------
// TABLE
// --------------------

@include class-model(box-table) {
  table-layout: fixed;
  @include class-modifier(row) {
    width: 100%;
    display: table;
  }
  @include class-modifier(col) {
    width: auto;
    display: table-cell;
    vertical-align: middle;
    @include class-modifier(truncate) {
       @include text-truncate;
    }
  }
  @include class-modifier(width) {
    @for $i from 1 through 20{
      @include class-option("#{$i}0") {
        width: $i * 10 + px;
      }
    }
  }
}

// --------------------
// COLLECTIONS
// --------------------

@include class-model(breadcrumbs) {
   @include class-modifier(headstrong) {
    li {
      &:first-child {
        @if $font-custom {
          font-family: $font-base-bold;
        }
        @else {
          font-weight: bold;
        }
      }
    }
  }
  li {
    display: inline-block;
    &:first-child {
      margin-left: 0;
    }
    &::after {
      @include font-icon(\e66c);
      vertical-align: text-bottom;
      color: $color-lightgrey;
      font-size: 1.2em;
    }
    &:last-child {
      cursor: default;
      &::after {
        display: none;
      }
    }
  }
}

// --------------------
// BUTTONS
// --------------------

@include class-model(button) {
  border: none;
  cursor: pointer;
  line-height: 1.5;
  position: relative;
  display: inline-block;
  color: $button-text-color;
  text-decoration: none;
  @include appearance();
  * {
    vertical-align: middle;
  }
  @if $font-custom and $button-text-style != regular {
    @if $font-base-bold{
      font-family: $font-base-bold;
    }
    @else {
      font-family: $font-base-regular;
    }
    @include class-modifier(thin) {
      @if $font-base-thin{
        font-family: $font-base-thin;
      }
      @else {
        @if $font-base-light{
          font-family: $font-base-light;
        }
        @else {
          font-family: $font-base-regular;
        }
      }
    }
  }
  @else {
    font-weight: bold;
  }
  @include class-modifier(regular) {
    font-family: $font-base-regular;
  }
  // sizes
  @for $i from 1 through $button-size-iteration {
    @include class-modifier("size_#{$i}") {
      @include font-size($font-root-size + ($i * $button-text-size-factor));
      @if $button-size-proportion == panoramic {
        padding: (4 + $i * $button-size-factor + px) (2 * $button-size-horizontal-gap + $i * $button-size-factor + px);
      }
      @else {
        padding: 4 + $i * $button-size-factor + px;
      }
      @include class-modifier(full) {
         @include class-option(width) {
          padding: (2 + $i * $button-size-factor + px) ($i * $button-size-factor + px);
        }
      }
    }
  }
  // roundings
  @include class-modifier("rounded") {
    @if $button-rounding-fixed {
       @include border-radius($button-rounding-fixed-size);
    }
    @else {
       @for $i from 1 through $button-rounding-iteration{
        @include class-option(#{$i}) {
           @include border-radius(1 + $i * $button-rounding-factor + px);
        }
      }
      @include class-option(full) {
         @include border-radius($button-rounding-full);
      }
    }
  }
  // colors - defined in _variables
  $n-colors: length($button-color-name);
  @include class-modifier(color) {
    @for $i from 1 through $n-colors {
      @include class-option(nth($button-color-name, $i)) {
        @if nth($button-color-name, $i) == $button-opposite-color {
          color: $button-opposite-text-color !important;
          &:active,
          &:hover {
            span,
            strong {
              color: inherit !important;
            }
          }
        }
        @if $button-border {
          border: $border-default #{nth($button-color-code, $i)};
        }
        background: #{nth($button-color-code, $i)};
        @include class-option(clear) {
          @if $button-clear-background-color {
            background: $button-clear-background-color;
          }
          @else {
            background: none;
          }
          @include box-shadow(
            inset 1px 0px #{nth($button-color-code, $i)},
            inset -1px 0px #{nth($button-color-code, $i)},
            inset 0px 1px #{nth($button-color-code, $i)},
            inset 0px -1px #{nth($button-color-code, $i)}
          );
          color: #{nth($button-color-code, $i)};
          &:active,
          &:hover {
            @if (nth($button-color-name, $i) == $button-opposite-color) {
              color: $button-opposite-text-color;
            }
            @else {
              color: $color-white;
            }
            box-shadow: none;
            background-color: #{nth($button-color-code, $i)};
          }
        }
      }
    }
  }
  // shadow
  @if $button-shadow == true {
    @include box-shadow($button-shadow-size $button-shadow-color);
    &:hover {
      @include box-shadow($button-shadow-size $button-shadow-color, inset 200px 200px 0 0 rgba(0, 0, 0, .03));
    }
    &:active {
      @include box-shadow($button-shadow-size-active $button-shadow-color, inset 200px 200px 0 0 rgba(0, 0, 0, .03));
    }
  }
  @else {
    &:active,
    &:hover {
      @include box-shadow(inset 200px 200px 0 0 $button-hover-shadow-color);
      color: $button-hover-text-color;
      span,
      strong {
        color: $button-hover-text-color !important;
      }
    }
  }
  @include class-modifier(full) {
    @include class-option(width) {
      width: 100%;
      text-align: center;
      padding-left: 0;
      padding-right: 0;
    }
    @include class-option(height) {
      height: 100%;
      line-height: 1.2;
    }
  }
  &:visited {
    color: $button-text-visited-color;
  }
  // with icon
  i {
    display: inline-block;
    vertical-align: middle;
    // margin-top: -4%; // proportion between button height and icon position
  }
  &:disabled {
    @include opacity(0.5);
    pointer-events: none;
  }
}
.actionContainer {
  @include element-width-custom(100%);
  position: relative;
}

// --------------------
// INPUTS
// --------------------

fieldset {
  @include class-model(input) {
    @include class-option(regular) {
      width: $width-100;
      padding: $shift-overall;
      color: $input_text-color;
      border: $input-text-border;
      // options
      @include class-modifier(rounded) {
        @include border-radius($input_text-border-radius);
      }
      // sizes
      @for $i from 1 through $input_text-size-iteration {
        @include class-modifier("scale_#{$i}") {
          padding: 2 + $i * $input_text-size-factor + px;
        }
      }
      // colors
      @include class-modifier(color) {
        $n-colors: length($input_text-color-name);
        @for $i from 1 through $n-colors {
          @include class-option(nth($input_text-color-name, $i)) {
            border-color: #{nth($input_text-color-code, $i)} !important;
          }
        }
      }
    }
  }
  @include class-model(type) {
    @include class-modifier(inlined) {
      input,
      label {
        display: inline-block;
        width: auto;
      }
    }
    @include class-modifier(blocked) {
      input,
      label {
        display: block;
        width: 100%;
      }
    }
    // Search Input
    @include class-modifier(search) {
      button {
        width: 15%;
      }
      input {
        width: 85%;
      }
    }
  }
  @include class-model(textarea) {
    background-color: $color-white;
    color: $input_text-color;
    border: $input-text-border;
    width: $width-100;
    resize: none;
    @for $i from 1 through $textarea-size-iteration {
      @include class-modifier("scale_#{$i}") {
        @if $textarea-text-resize == true {
          @include font-size($font-base-size + $i * $textarea-text-size-factor);
        }
        @else {
          @include font-size($textarea-text-size);
        }
        padding: 2 + $i * $input_text-size-factor + px;
        height: $textarea-size-factor * $i + px;
      }
    }
    @include class-modifier(rounded) {
      @include border-radius($input_text-border-radius);
    }
  }
}

// --------------------
// RESETS
// --------------------

@include class-model(reset) {
  // Borders
  @include class-modifier(border) {
    $types: top, right, bottom, left;
    @each $type in $types {
      @include class-option($type) {
        border-#{$type}: none !important;
      }
    }
    @include class-option(full) {
      border: none !important;
    }
  }
  // Background
  @include class-modifier(bg) {
    background: none;
  }
  @include class-modifier(margin) {
    margin: 0 !important;
  }
  @include class-modifier(padding) {
    $types: left, right, top, bottom;
    @each $type in $types {
        @include class-option($type) {
        padding-#{$type}: 0 !important;
      }
    }
    @include class-option(full) {
      padding: 0 !important;
    }
  }
}
